#import "./lib/fa2/asset/multi_asset.jsligo" "MULTIASSET"
#include "./types.jsligo"
export const mint = (
  { token_id, quantity, name, description, symbol, ipfsUrl }: TMintParameter,
  s: TStorage
): TReturn => {
  if (quantity == (0 as nat)) return failwith("Quantity must be greater than 0");
  if (!Set.mem(Tezos.get_sender(), s.administrators)) return failwith(
    "Unauthorized"
  );
  const token_info: map<string, bytes> =
    Map.literal(
      list(
        [
          ["name", name],
          ["description", description],
          ["interfaces", (bytes `["TZIP-12"]`)],
          ["thumbnailUri", ipfsUrl],
          ["symbol", symbol],
          ["decimals", (bytes `0`)]
        ]
      )
    ) as map<string, bytes>;
  const metadata: bytes =
    bytes
    `{
      "name":"Ameno FA2 NFT Marketplace",
      "description":"Ameno FA2 nft marketplace",
      "version":"0.0.1",
      "license":{"name":"MIT"},
      "authors":["Ameno<contact@ameno.dev>"],
      "homepage":"https://ameno.poc-innovation.fr/",
      "source":{
        "tools":["Ligo"],
        "location":"https://github.com/ligolang/contract-catalogue/tree/main/lib/fa2"
      },
      "interfaces":["TZIP-012"],
      "errors": [],
      "views": []
    }`;
  return [
    list([]) as list<operation>,
    {
      ...s,
      ledger: Big_map.add(
        [Tezos.get_sender(), token_id],
        quantity as nat,
        s.ledger
      ) as MULTIASSET.Ledger.t,
      metadata: Big_map.literal(
        list([["", bytes `tezos-storage:data`], ["data", metadata]])
      ),
      token_metadata: Big_map.add(
        token_id,
        { token_id: token_id, token_info: token_info },
        s.token_metadata
      ),
      operators: Big_map.empty as MULTIASSET.Operators.t,
      owner_token_ids: Set.add(
        [Tezos.get_sender(), token_id],
        s.owner_token_ids
      ),
      token_ids: Set.add(token_id, s.token_ids)
    }
  ]
};

export const buy = ({ token_id, quantity, seller }: TBuyParameter, s: TStorage)
  : TReturn => {
  return match(
    Map.find_opt([seller, token_id], s.offers),
    {
      None: () => failwith("Token not found"),
      Some: (offer: TOffer) => {
        if (Tezos.get_amount() < offer.price * (1 as mutez)) return failwith(
          "Amount sent is not enough"
        );
        const op =
          Tezos.transaction(
            unit,
            offer.price * (1 as mutez),
            Tezos.get_contract_with_error(seller, "Contract not found")
          );
        let ledger =
          MULTIASSET.Ledger.decrease_token_amount_for_user(
            [s.ledger, seller, token_id, quantity]
          );
        ledger =
          MULTIASSET.Ledger.increase_token_amount_for_user(
            [ledger, Tezos.get_source(), token_id, quantity]
          );
        const newOffer = { ...offer, quantity: abs(offer.quantity - quantity) };
        return [
          list([op]) as list<operation>,
          {
            ...s,
            offers: Map.update([seller, token_id], Some(newOffer), s.offers),
            ledger: ledger,
            owner_token_ids: Set.add(
              [Tezos.get_source(), token_id],
              s.owner_token_ids
            )
          }
        ]
      }
    }
  )
};

export const sell = ({ token_id, quantity, price }: TSellParameter, s: TStorage)
  : TReturn => {
  const sellerBalance =
    MULTIASSET.Ledger.get_for_user([s.ledger, Tezos.get_source(), token_id]);
  if (quantity > sellerBalance) return failwith("Balance too low");
  const newOperators =
    MULTIASSET.Operators.add_operator(
      [s.operators, Tezos.get_source(), Tezos.get_self_address(), token_id]
    );
  return [
    list([]) as list<operation>,
    {
      ...s,
      offers: Map.add(
        [Tezos.get_source(), token_id],
        { quantity: quantity, price: price },
        s.offers
      ),
      operators: newOperators
    }
  ]
};

export const transfer = (p: MULTIASSET.transfer, s: TStorage): TReturn => {
  const ret2: [list<operation>, MULTIASSET.storage] =
    MULTIASSET.transfer(
      [
        p,
        {
          ledger: s.ledger,
          metadata: s.metadata,
          token_metadata: s.token_metadata,
          operators: s.operators,
          owner_token_ids: s.owner_token_ids,
          token_ids: s.token_ids
        }
      ]
    );
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
      owner_token_ids: ret2[1].owner_token_ids,
      token_ids: ret2[1].token_ids
    }
  ]
};

export const addAdministrator = (p: address, s: TStorage): TReturn => {
  if (Set.mem(Tezos.get_sender(), s.administrators)) {
    return [list([]), { ...s, administrators: Set.add(p, s.administrators) }]
  } else {
    return failwith("Unauthorized")
  }
};

export const balanceOf = (p: MULTIASSET.balance_of, s: TStorage): TReturn => {
  const ret: [list<operation>, MULTIASSET.storage] =
    MULTIASSET.balance_of(
      [
        p,
        {
          ledger: s.ledger,
          metadata: s.metadata,
          token_metadata: s.token_metadata,
          operators: s.operators,
          owner_token_ids: s.owner_token_ids,
          token_ids: s.token_ids
        }
      ]
    );
  return [
    ret[0],
    {
      ...s,
      ledger: ret[1].ledger,
      metadata: ret[1].metadata,
      token_metadata: ret[1].token_metadata,
      operators: ret[1].operators,
      owner_token_ids: ret[1].owner_token_ids,
      token_ids: ret[1].token_ids
    }
  ]
};

export const updateOperators = (p: MULTIASSET.update_operators, s: TStorage)
  : TReturn => {
  const ret: [list<operation>, MULTIASSET.storage] =
    MULTIASSET.update_ops(
      [
        p,
        {
          ledger: s.ledger,
          metadata: s.metadata,
          token_metadata: s.token_metadata,
          operators: s.operators,
          owner_token_ids: s.owner_token_ids,
          token_ids: s.token_ids
        }
      ]
    );
  return [
    ret[0],
    {
      ...s,
      ledger: ret[1].ledger,
      metadata: ret[1].metadata,
      token_metadata: ret[1].token_metadata,
      operators: ret[1].operators,
      owner_token_ids: ret[1].owner_token_ids,
      token_ids: ret[1].token_ids
    }
  ]
};
